Host: Ubuntu OS

(1) Download source to host OS
$ cd ~/src/
$ git clone https://github.com/zenodo/zenodo.git

(2) Build docker images and containers
docker-compose build

(3) To start test the building result, run following command and then input http://localhost:5000/ in browser.
# Add "INVENIO_CELERY_BROKER_URL=amqp://guest:guest@mq:5672//" to zenodo/docker-services.yml environment variable 
# if failed to start mq.
docker-compose up
# Output:
# user@machine:~/src/zenodo$ docker-compose up
# Starting zenodo_db_1     ... done
# Starting zenodo_mq_1     ... done
# Starting zenodo_cache_1  ... done
# Starting zenodo_static_1 ... done
# Starting zenodo_es_1     ... done
# Starting zenodo_flower_1 ... done
# Starting zenodo_web_1    ... done
# Starting zenodo_worker_1 ... done

(3) Start docker containers build in step2. This step could be done before step9.
docker-compose up db es cache mq

(4) Check and clean OS default python environment. Install python3 and make it as the default python env.
sudo apt-get update
sudo apt-get install -y python3-pip
# add following 2 lines to ~/.bashrc file to make python3 as default.
# alias python=python3
# alias pip=pip3

(5) Install 2 python modules: virtualenv and virtualenvwrapper.
sudo apt-get install python-virtualenv
sudo apt-get install virtualenvwrapper

(6) Install nodejs on host os
# Install Node.js 7.x repository
sudo curl -sL https://deb.nodesource.com/setup_7.x | sudo bash -
# Install Node.js and npm
apt-get install -y nodejs

(7) Create virtual python environment
mkdir /home/envs
### Append following 3 lines to the end of ~/.bashrc file, and do "source ~/.bashrc" after saving the file. 
### The path on the 3rd line should be the actual path where virtualenvwrapper.sh is installed.
    export WORKON_HOME=$HOME/.virtualenvs
    export PROJECT_HOME=$HOME/envs
    source /usr/local/bin/virtualenvwrapper.sh
mkvirtualenv zenodo

(8) Build zenodo on host os, this should be done under virtual python environment created in step7.
(zenodo)$
(zenodo)$ cd ~/src/zenodo
(zenodo)$ pip install -r requirements.txt --src ~/src/ --pre --upgrade
(zenodo)$ pip install -e .[all,postgresql,elasticsearch2]

(zenodo)$ sudo ./scripts/setup-npm.sh
# install nodejs modules system-wide. Output when finished:
# /usr/lib
# ├── clean-css@3.4.19 
# ├─┬ node-sass@3.8.0 
# │ └─┬ request@2.85.0
# │   └── aws4@1.7.0 
# ├── requirejs@2.2.0 
# └── uglify-js@2.7.3

(zenodo)$ ./scripts/setup-assets.sh
# Output when finished:
# 474 of 474 files already present
# Done collecting.
# Building bundle: gen/search.%(version)s.js
# Building bundle: gen/zenodo.search.%(version)s.js
# Building bundle: gen/styles.%(version)s.css
# Building bundle: gen/packed.%(version)s.js
# Building bundle: gen/pdfjs.%(version)s.css
# Building bundle: gen/deposit.%(version)s.js
# Building bundle: gen/pdfjs.%(version)s.js
# Building bundle: gen/github.%(version)s.js
# Building bundle: gen/prism.%(version)s.css
# Building bundle: gen/deposit.%(version)s.css
# Building bundle: gen/zenodo.%(version)s.css
# Building bundle: gen/communities.%(version)s.js
# Building bundle: gen/csv_previewer.%(version)s.js
# Building bundle: gen/styles.admin.%(version)s.css
# Building bundle: gen/admin.%(version)s.js
# Building bundle: gen/fullscreen.%(version)s.js
# Building bundle: gen/github.%(version)s.css
# Building bundle: gen/deposit.dependencies.%(version)s.js
# Building bundle: gen/zenodo.%(version)s.js
# Building bundle: gen/zenodo.deposit.%(version)s.js
# Building bundle: gen/i18n.%(version)s.js
# Building bundle: gen/prism.%(version)s.js
# Building bundle: gen/styles.admin-lte.%(version)s.css
# Building bundle: gen/translations/invenio-search-ui.js
# Building bundle: gen/search.%(version)s.css
# Building bundle: gen/communities.%(version)s.css


(9) Initialize zenodo:
(zenodo)$ ./scripts/init.sh

